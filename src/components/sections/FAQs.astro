---
import { Icon } from 'astro-icon/components'

interface Props {
  title?: string
  description?: string
  faqs?: Array<{
    question?: string
    answer?: string
  }>
}

const { title = '', description = '', faqs = [] } = Astro.props
---

<section class="bg-white py-16 md:py-20">
  <div class="container mx-auto grid grid-cols-1 gap-y-6 px-4 md:grid-cols-3 md:gap-6">
    <div class="flex flex-col justify-between">
      <div class="h-full rounded-xl bg-primary p-8 text-white">
        <h2 class="mb-6 text-xl font-semibold md:text-2xl" data-in="wordFade">{title}</h2>
        <p class="mb-6 text-lg opacity-80">{description}</p>
      </div>
    </div>
    <ul class="col-span-2 flex flex-col gap-3">
      {
        faqs.map((faq) => {
          return (
            <li class="group cursor-pointer rounded-xl bg-neutral-100 px-6 py-5 hover:bg-neutral-200">
              <div class="faq-question grid grid-cols-[1fr_auto]">
                <h5 class="text-base font-medium md:text-lg">{faq.question}</h5>
                <Icon name="plus" size={24} class="text-gray-900 transition-transform duration-700 group-[.expanded]:rotate-45" />
              </div>
              <div class="faq-answer col-span-2 max-h-0 overflow-hidden opacity-0 transition-all duration-700 ease-in-out group-[.expanded]:max-h-[1000px] group-[.expanded]:opacity-100">
                <p class="mt-3 text-gray-500">{faq.answer}</p>
              </div>
            </li>
          )
        })
      }
    </ul>
  </div>
</section>

<script>
  // Extend HTMLLIElement to include toggleFaq property
  declare global {
    interface HTMLLIElement {
      toggleFaq?: () => void
    }
  }

  // Initialize accordion functionality
  function initAccordion() {
    const faqItems = document.querySelectorAll('li')

    faqItems.forEach((item) => {
      // Create a toggleFaq function that captures the current item
      const toggleFaq = () => {
        // Toggle expanded class on li element
        item.classList.toggle('expanded')
      }

      // Remove existing event listeners (if any)
      if (item.toggleFaq) {
        item.removeEventListener('click', item.toggleFaq)
      }

      // Store the function reference on the element for future removal
      item.toggleFaq = toggleFaq

      // Add click event to li element
      item.addEventListener('click', toggleFaq)
    })
  }

  // Run on initial page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAccordion)
  } else {
    initAccordion()
  }

  // Run when Astro page transitions occur
  document.addEventListener('astro:page-load', initAccordion)
</script>
