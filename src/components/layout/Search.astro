---
// 使用动态导入以避免类型冲突
import PagefindSearch from 'astro-pagefind/components/Search'

interface Props {
  id?: string
  className?: string
}

const { id = 'search', className = 'pagefind-ui' } = Astro.props
---

<div class="relative" id="search-container">
  <div id="search-trigger" class="flex h-16 w-16 cursor-pointer items-center justify-center border-x border-gray-300 p-2">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="20"
      height="20"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="1"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="text-gray-500"
    >
      <circle cx="11" cy="11" r="6"></circle>
      <line x1="20" y1="20" x2="15" y2="15"></line>
    </svg>
  </div>

  <div
    id="search-overlay"
    class="absolute top-0 left-0 flex h-16 w-16 -translate-y-full cursor-pointer items-center justify-center border-x border-gray-300 bg-gray-200 p-2 transition-transform duration-500"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="20"
      height="20"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="1"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="text-gray-500"
    >
      <line x1="18" y1="6" x2="6" y2="18"></line>
      <line x1="6" y1="6" x2="18" y2="18"></line>
    </svg>
  </div>
</div>

<div id="search-content" class="fixed top-24 right-0 left-0 z-50 hidden bg-white opacity-0">
  <div class="container mx-auto px-4">
    <PagefindSearch id={id} className={className} />
  </div>
</div>

<script>
  import { animate, easeOut, easeIn } from 'motion'

  type SearchElements = {
    trigger: HTMLElement
    overlay: HTMLElement
    content: HTMLElement
  }

  const elements = {
    trigger: document.getElementById('search-trigger'),
    overlay: document.getElementById('search-overlay'),
    content: document.getElementById('search-content')
  }

  const animations = {
    overlay: {
      show: { y: '100%', duration: 0.3, ease: easeOut },
      hide: { y: '-100%', duration: 0.3, ease: easeIn }
    },
    content: {
      show: { display: 'block', opacity: 1, y: 0, duration: 0.3, ease: easeOut },
      hide: { opacity: 0, y: '100%', duration: 0.3, ease: easeIn }
    }
  } as const

  if (Object.values(elements).every(Boolean)) {
    const safeElements = elements as SearchElements

    safeElements.trigger.addEventListener('click', () => {
      animate([
        [safeElements.overlay, animations.overlay.show],
        [safeElements.content, animations.content.show, { at: '+0.2' }]
      ])
    })

    safeElements.overlay.addEventListener('click', () => {
      animate([
        [safeElements.overlay, animations.overlay.hide],
        [safeElements.content, animations.content.hide],
        [safeElements.content, { display: 'none' }, { at: '+0.3' }]
      ])
    })
  } else {
    console.error('Required DOM elements not found')
  }
</script>
